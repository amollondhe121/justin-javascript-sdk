/*
 * Verbwire API documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VerbwireApiDocumentation);
  }
}(this, function(expect, VerbwireApiDocumentation) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UpdateInitCollectionContractBody', function() {
      beforeEach(function() {
        instance = new VerbwireApiDocumentation.UpdateInitCollectionContractBody();
      });

      it('should create an instance of UpdateInitCollectionContractBody', function() {
        // TODO: update the code to test UpdateInitCollectionContractBody
        expect(instance).to.be.a(VerbwireApiDocumentation.UpdateInitCollectionContractBody);
      });

      it('should have the property contractAddress (base name: "contractAddress")', function() {
        // TODO: update the code to test the property contractAddress
        expect(instance).to.have.property('contractAddress');
        // expect(instance.contractAddress).to.be(expectedValueLiteral);
      });

      it('should have the property maxMintPerAddress (base name: "maxMintPerAddress")', function() {
        // TODO: update the code to test the property maxMintPerAddress
        expect(instance).to.have.property('maxMintPerAddress');
        // expect(instance.maxMintPerAddress).to.be(expectedValueLiteral);
      });

      it('should have the property totalReserveQty (base name: "totalReserveQty")', function() {
        // TODO: update the code to test the property totalReserveQty
        expect(instance).to.have.property('totalReserveQty');
        // expect(instance.totalReserveQty).to.be(expectedValueLiteral);
      });

      it('should have the property totalAllowlistQty (base name: "totalAllowlistQty")', function() {
        // TODO: update the code to test the property totalAllowlistQty
        expect(instance).to.have.property('totalAllowlistQty');
        // expect(instance.totalAllowlistQty).to.be(expectedValueLiteral);
      });

      it('should have the property maxSupply (base name: "maxSupply")', function() {
        // TODO: update the code to test the property maxSupply
        expect(instance).to.have.property('maxSupply');
        // expect(instance.maxSupply).to.be(expectedValueLiteral);
      });

      it('should have the property maxMintableBatchSize (base name: "maxMintableBatchSize")', function() {
        // TODO: update the code to test the property maxMintableBatchSize
        expect(instance).to.have.property('maxMintableBatchSize');
        // expect(instance.maxMintableBatchSize).to.be(expectedValueLiteral);
      });

      it('should have the property royaltiesInBps (base name: "royaltiesInBps")', function() {
        // TODO: update the code to test the property royaltiesInBps
        expect(instance).to.have.property('royaltiesInBps');
        // expect(instance.royaltiesInBps).to.be(expectedValueLiteral);
      });

      it('should have the property royaltiesAddress (base name: "royaltiesAddress")', function() {
        // TODO: update the code to test the property royaltiesAddress
        expect(instance).to.have.property('royaltiesAddress');
        // expect(instance.royaltiesAddress).to.be(expectedValueLiteral);
      });

      it('should have the property ownerAddress (base name: "ownerAddress")', function() {
        // TODO: update the code to test the property ownerAddress
        expect(instance).to.have.property('ownerAddress');
        // expect(instance.ownerAddress).to.be(expectedValueLiteral);
      });

      it('should have the property tokenURIPrereveal (base name: "tokenURIPrereveal")', function() {
        // TODO: update the code to test the property tokenURIPrereveal
        expect(instance).to.have.property('tokenURIPrereveal');
        // expect(instance.tokenURIPrereveal).to.be(expectedValueLiteral);
      });

      it('should have the property baseTokenURI (base name: "baseTokenURI")', function() {
        // TODO: update the code to test the property baseTokenURI
        expect(instance).to.have.property('baseTokenURI');
        // expect(instance.baseTokenURI).to.be(expectedValueLiteral);
      });

      it('should have the property allowListMintStartTime (base name: "allowListMintStartTime")', function() {
        // TODO: update the code to test the property allowListMintStartTime
        expect(instance).to.have.property('allowListMintStartTime');
        // expect(instance.allowListMintStartTime).to.be(expectedValueLiteral);
      });

      it('should have the property publicSaleStartTime (base name: "publicSaleStartTime")', function() {
        // TODO: update the code to test the property publicSaleStartTime
        expect(instance).to.have.property('publicSaleStartTime');
        // expect(instance.publicSaleStartTime).to.be(expectedValueLiteral);
      });

      it('should have the property allowlistMintPriceInWei (base name: "allowlistMintPriceInWei")', function() {
        // TODO: update the code to test the property allowlistMintPriceInWei
        expect(instance).to.have.property('allowlistMintPriceInWei');
        // expect(instance.allowlistMintPriceInWei).to.be(expectedValueLiteral);
      });

      it('should have the property publicPriceInWei (base name: "publicPriceInWei")', function() {
        // TODO: update the code to test the property publicPriceInWei
        expect(instance).to.have.property('publicPriceInWei');
        // expect(instance.publicPriceInWei).to.be(expectedValueLiteral);
      });

      it('should have the property metadataFrozen (base name: "metadataFrozen")', function() {
        // TODO: update the code to test the property metadataFrozen
        expect(instance).to.have.property('metadataFrozen');
        // expect(instance.metadataFrozen).to.be(expectedValueLiteral);
      });

      it('should have the property recipientAddress (base name: "recipientAddress")', function() {
        // TODO: update the code to test the property recipientAddress
        expect(instance).to.have.property('recipientAddress');
        // expect(instance.recipientAddress).to.be(expectedValueLiteral);
      });

      it('should have the property chain (base name: "chain")', function() {
        // TODO: update the code to test the property chain
        expect(instance).to.have.property('chain');
        // expect(instance.chain).to.be(expectedValueLiteral);
      });

    });
  });

}));
