/*
 * Verbwire API documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse20110} from '../model/InlineResponse20110';
import {InlineResponse20111} from '../model/InlineResponse20111';
import {InlineResponse20112} from '../model/InlineResponse20112';
import {InlineResponse20113} from '../model/InlineResponse20113';
import {InlineResponse20114} from '../model/InlineResponse20114';
import {InlineResponse400} from '../model/InlineResponse400';
import {InlineResponse4001} from '../model/InlineResponse4001';

/**
* Store service.
* @module api/StoreApi
* @version 1.0.0
*/
export class StoreApi {

    /**
    * Constructs a new StoreApi. 
    * @alias module:api/StoreApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the nftStoreFileFromUrlPost operation.
     * @callback moduleapi/StoreApi~nftStoreFileFromUrlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20111{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a file via URL to IPFS
     * Uploads a file to IPFS from a provided url. A quick and seamless way to store a file in IPFS. This does not create a metadata json file that can be used as an NFT metadata.
     * @param {String} fileUrl 
     * @param {module:api/StoreApi~nftStoreFileFromUrlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftStoreFileFromUrlPost(fileUrl, callback) {
      
      let postBody = null;
      // verify the required parameter 'fileUrl' is set
      if (fileUrl === undefined || fileUrl === null) {
        throw new Error("Missing the required parameter 'fileUrl' when calling nftStoreFileFromUrlPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'fileUrl': fileUrl
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20111;

      return this.apiClient.callApi(
        '/nft/store/fileFromUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftStoreFilePost operation.
     * @callback moduleapi/StoreApi~nftStoreFilePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20110{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a local file to IPFS
     * Uploads a local file directly to IPFS. A quick and seamless way to store a file in IPFS. This does not create a metadata json file that can be used as an NFT metadata.
     * @param {Blob} filePath 
     * @param {module:api/StoreApi~nftStoreFilePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftStoreFilePost(filePath, callback) {
      
      let postBody = null;
      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling nftStoreFilePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'filePath': filePath
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20110;

      return this.apiClient.callApi(
        '/nft/store/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftStoreMetadataFromImagePost operation.
     * @callback moduleapi/StoreApi~nftStoreMetadataFromImagePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20113{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload local file as metadata to IPFS
     * Creates a metadata json file from the provided local file, and uploads the metadata file directly to IPFS, all in one operation.
     * @param {Blob} filePath 
     * @param {String} name 
     * @param {String} description 
     * @param {module:api/StoreApi~nftStoreMetadataFromImagePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftStoreMetadataFromImagePost(filePath, name, description, callback) {
      
      let postBody = null;
      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling nftStoreMetadataFromImagePost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling nftStoreMetadataFromImagePost");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling nftStoreMetadataFromImagePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'filePath': filePath,'name': name,'description': description
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20113;

      return this.apiClient.callApi(
        '/nft/store/metadataFromImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftStoreMetadataFromImageUrlPost operation.
     * @callback moduleapi/StoreApi~nftStoreMetadataFromImageUrlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20112{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a URL to IPFS as NFT metadata
     * Creates a metadata json file from the provided URL and uploads the metadata file direcly to IPFS, all in one operation.
     * @param {String} fileUrl 
     * @param {String} name 
     * @param {String} description 
     * @param {module:api/StoreApi~nftStoreMetadataFromImageUrlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftStoreMetadataFromImageUrlPost(fileUrl, name, description, callback) {
      
      let postBody = null;
      // verify the required parameter 'fileUrl' is set
      if (fileUrl === undefined || fileUrl === null) {
        throw new Error("Missing the required parameter 'fileUrl' when calling nftStoreMetadataFromImageUrlPost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling nftStoreMetadataFromImageUrlPost");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling nftStoreMetadataFromImageUrlPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'fileUrl': fileUrl,'name': name,'description': description
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20112;

      return this.apiClient.callApi(
        '/nft/store/metadataFromImageUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftStoreUploadDirectoryPost operation.
     * @callback moduleapi/StoreApi~nftStoreUploadDirectoryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a directory to IPFS
     * Uploads a directory of metadata json files to IPFS. Useful for creating nft collections. The files in your directory should be numbered, example &amp;#58; 1.json, 2.json, 3.json. You will need to upload all the files together at once. The uploaded files to IPFS will all be in the same IPFS directory. Once uploaded to IPFS the file extensions (.json) will be removed. Example &amp;#58; file \&quot;1.json\&quot; will show up as \&quot;1\&quot; in the IPFS directory
     * @param {Blob} filePath 
     * @param {module:api/StoreApi~nftStoreUploadDirectoryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftStoreUploadDirectoryPost(filePath, callback) {
      
      let postBody = null;
      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling nftStoreUploadDirectoryPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'filePath': filePath
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20114;

      return this.apiClient.callApi(
        '/nft/store/uploadDirectory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}