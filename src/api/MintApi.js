/*
 * Verbwire API documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse2012} from '../model/InlineResponse2012';
import {InlineResponse2015} from '../model/InlineResponse2015';
import {InlineResponse2016} from '../model/InlineResponse2016';
import {InlineResponse2017} from '../model/InlineResponse2017';
import {InlineResponse2018} from '../model/InlineResponse2018';
import {InlineResponse400} from '../model/InlineResponse400';

/**
* Mint service.
* @module api/MintApi
* @version 1.0.0
*/
export class MintApi {

    /**
    * Constructs a new MintApi. 
    * @alias module:api/MintApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the nftMintCollectionReserveMintPost operation.
     * @callback moduleapi/MintApi~nftMintCollectionReserveMintPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mint to a Wallet Address
     * Mint an NFT to a provided address. Works with only collection contracts.
     * @param {String} mintQty 
     * @param {String} contractAddress 
     * @param {String} recipientAddress 
     * @param {module:model/String} chain 
     * @param {module:api/MintApi~nftMintCollectionReserveMintPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftMintCollectionReserveMintPost(mintQty, contractAddress, recipientAddress, chain, callback) {
      
      let postBody = null;
      // verify the required parameter 'mintQty' is set
      if (mintQty === undefined || mintQty === null) {
        throw new Error("Missing the required parameter 'mintQty' when calling nftMintCollectionReserveMintPost");
      }
      // verify the required parameter 'contractAddress' is set
      if (contractAddress === undefined || contractAddress === null) {
        throw new Error("Missing the required parameter 'contractAddress' when calling nftMintCollectionReserveMintPost");
      }
      // verify the required parameter 'recipientAddress' is set
      if (recipientAddress === undefined || recipientAddress === null) {
        throw new Error("Missing the required parameter 'recipientAddress' when calling nftMintCollectionReserveMintPost");
      }
      // verify the required parameter 'chain' is set
      if (chain === undefined || chain === null) {
        throw new Error("Missing the required parameter 'chain' when calling nftMintCollectionReserveMintPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'mintQty': mintQty,'contractAddress': contractAddress,'recipientAddress': recipientAddress,'chain': chain
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2016;

      return this.apiClient.callApi(
        '/nft/mint/collectionReserveMint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftMintCustomContractMintFromFilePost operation.
     * @callback moduleapi/MintApi~nftMintCustomContractMintFromFilePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2018{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Custom Contract NFT Mint from image
     * Mint an NFT from an image file using your created custom contract
     * @param {Blob} filePath 
     * @param {String} name 
     * @param {String} description 
     * @param {String} recipientAddress 
     * @param {String} contractAddress 
     * @param {module:model/String} chain 
     * @param {module:api/MintApi~nftMintCustomContractMintFromFilePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftMintCustomContractMintFromFilePost(filePath, name, description, recipientAddress, contractAddress, chain, callback) {
      
      let postBody = null;
      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling nftMintCustomContractMintFromFilePost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling nftMintCustomContractMintFromFilePost");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling nftMintCustomContractMintFromFilePost");
      }
      // verify the required parameter 'recipientAddress' is set
      if (recipientAddress === undefined || recipientAddress === null) {
        throw new Error("Missing the required parameter 'recipientAddress' when calling nftMintCustomContractMintFromFilePost");
      }
      // verify the required parameter 'contractAddress' is set
      if (contractAddress === undefined || contractAddress === null) {
        throw new Error("Missing the required parameter 'contractAddress' when calling nftMintCustomContractMintFromFilePost");
      }
      // verify the required parameter 'chain' is set
      if (chain === undefined || chain === null) {
        throw new Error("Missing the required parameter 'chain' when calling nftMintCustomContractMintFromFilePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'filePath': filePath,'name': name,'description': description,'recipientAddress': recipientAddress,'contractAddress': contractAddress,'chain': chain
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2018;

      return this.apiClient.callApi(
        '/nft/mint/customContractMintFromFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftMintCustomContractMintFromMetadataUrlPost operation.
     * @callback moduleapi/MintApi~nftMintCustomContractMintFromMetadataUrlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2017{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mint Custom contract NFT
     * Mint an NFT from a provided metadata json file URL using your created custom contract
     * @param {String} metadataUrl 
     * @param {String} contractAddress 
     * @param {String} recipientAddress 
     * @param {module:model/String} chain 
     * @param {module:api/MintApi~nftMintCustomContractMintFromMetadataUrlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftMintCustomContractMintFromMetadataUrlPost(metadataUrl, contractAddress, recipientAddress, chain, callback) {
      
      let postBody = null;
      // verify the required parameter 'metadataUrl' is set
      if (metadataUrl === undefined || metadataUrl === null) {
        throw new Error("Missing the required parameter 'metadataUrl' when calling nftMintCustomContractMintFromMetadataUrlPost");
      }
      // verify the required parameter 'contractAddress' is set
      if (contractAddress === undefined || contractAddress === null) {
        throw new Error("Missing the required parameter 'contractAddress' when calling nftMintCustomContractMintFromMetadataUrlPost");
      }
      // verify the required parameter 'recipientAddress' is set
      if (recipientAddress === undefined || recipientAddress === null) {
        throw new Error("Missing the required parameter 'recipientAddress' when calling nftMintCustomContractMintFromMetadataUrlPost");
      }
      // verify the required parameter 'chain' is set
      if (chain === undefined || chain === null) {
        throw new Error("Missing the required parameter 'chain' when calling nftMintCustomContractMintFromMetadataUrlPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'metadataUrl': metadataUrl,'contractAddress': contractAddress,'recipientAddress': recipientAddress,'chain': chain
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2017;

      return this.apiClient.callApi(
        '/nft/mint/customContractMintFromMetadataUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftMintQuickMintFromFilePost operation.
     * @callback moduleapi/MintApi~nftMintQuickMintFromFilePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2015{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quick mint Omnichain NFT from image
     * Mint an Omnichain NFT directly from your specified image file in seconds
     * @param {Blob} filePath 
     * @param {String} name 
     * @param {String} description 
     * @param {String} recipientAddress 
     * @param {module:model/String} allowPlatformToOperateToken 
     * @param {module:model/String} chain 
     * @param {module:api/MintApi~nftMintQuickMintFromFilePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftMintQuickMintFromFilePost(filePath, name, description, recipientAddress, allowPlatformToOperateToken, chain, callback) {
      
      let postBody = null;
      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling nftMintQuickMintFromFilePost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling nftMintQuickMintFromFilePost");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling nftMintQuickMintFromFilePost");
      }
      // verify the required parameter 'recipientAddress' is set
      if (recipientAddress === undefined || recipientAddress === null) {
        throw new Error("Missing the required parameter 'recipientAddress' when calling nftMintQuickMintFromFilePost");
      }
      // verify the required parameter 'allowPlatformToOperateToken' is set
      if (allowPlatformToOperateToken === undefined || allowPlatformToOperateToken === null) {
        throw new Error("Missing the required parameter 'allowPlatformToOperateToken' when calling nftMintQuickMintFromFilePost");
      }
      // verify the required parameter 'chain' is set
      if (chain === undefined || chain === null) {
        throw new Error("Missing the required parameter 'chain' when calling nftMintQuickMintFromFilePost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'filePath': filePath,'name': name,'description': description,'recipientAddress': recipientAddress,'allowPlatformToOperateToken': allowPlatformToOperateToken,'chain': chain
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2015;

      return this.apiClient.callApi(
        '/nft/mint/quickMintFromFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftMintQuickMintFromMetadataUrlPost operation.
     * @callback moduleapi/MintApi~nftMintQuickMintFromMetadataUrlPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Quick mint from Metadata URL
     * Mint an Omnichain NFT directly from a provided metadata file URL
     * @param {String} metadataUrl 
     * @param {String} recipientAddress 
     * @param {module:model/String} allowPlatformToOperateToken 
     * @param {module:model/String} chain 
     * @param {module:api/MintApi~nftMintQuickMintFromMetadataUrlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftMintQuickMintFromMetadataUrlPost(metadataUrl, recipientAddress, allowPlatformToOperateToken, chain, callback) {
      
      let postBody = null;
      // verify the required parameter 'metadataUrl' is set
      if (metadataUrl === undefined || metadataUrl === null) {
        throw new Error("Missing the required parameter 'metadataUrl' when calling nftMintQuickMintFromMetadataUrlPost");
      }
      // verify the required parameter 'recipientAddress' is set
      if (recipientAddress === undefined || recipientAddress === null) {
        throw new Error("Missing the required parameter 'recipientAddress' when calling nftMintQuickMintFromMetadataUrlPost");
      }
      // verify the required parameter 'allowPlatformToOperateToken' is set
      if (allowPlatformToOperateToken === undefined || allowPlatformToOperateToken === null) {
        throw new Error("Missing the required parameter 'allowPlatformToOperateToken' when calling nftMintQuickMintFromMetadataUrlPost");
      }
      // verify the required parameter 'chain' is set
      if (chain === undefined || chain === null) {
        throw new Error("Missing the required parameter 'chain' when calling nftMintQuickMintFromMetadataUrlPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'metadataUrl': metadataUrl,'recipientAddress': recipientAddress,'allowPlatformToOperateToken': allowPlatformToOperateToken,'chain': chain
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/nft/mint/quickMintFromMetadataUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}