/*
 * Verbwire API documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Error} from '../model/Error';
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse2014} from '../model/InlineResponse2014';
import {InlineResponse400} from '../model/InlineResponse400';

/**
* Update service.
* @module api/UpdateApi
* @version 1.0.0
*/
export class UpdateApi {

    /**
    * Constructs a new UpdateApi. 
    * @alias module:api/UpdateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the nftDeployUpdateContractPost operation.
     * @callback moduleapi/UpdateApi~nftDeployUpdateContractPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Collection Contract
     * Update parameters of your collection contract
     * @param {String} contractAddress 
     * @param {module:model/String} chain 
     * @param {String} tokenURIPrereveal 
     * @param {String} allowListMintStartTime 
     * @param {String} publicSaleStartTime 
     * @param {String} allowlistMintPriceInWei 
     * @param {String} publicPriceInWei 
     * @param {String} metadataFrozen 
     * @param {String} baseTokenURI 
     * @param {module:api/UpdateApi~nftDeployUpdateContractPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftDeployUpdateContractPost(contractAddress, chain, tokenURIPrereveal, allowListMintStartTime, publicSaleStartTime, allowlistMintPriceInWei, publicPriceInWei, metadataFrozen, baseTokenURI, callback) {
      
      let postBody = null;
      // verify the required parameter 'contractAddress' is set
      if (contractAddress === undefined || contractAddress === null) {
        throw new Error("Missing the required parameter 'contractAddress' when calling nftDeployUpdateContractPost");
      }
      // verify the required parameter 'chain' is set
      if (chain === undefined || chain === null) {
        throw new Error("Missing the required parameter 'chain' when calling nftDeployUpdateContractPost");
      }
      // verify the required parameter 'tokenURIPrereveal' is set
      if (tokenURIPrereveal === undefined || tokenURIPrereveal === null) {
        throw new Error("Missing the required parameter 'tokenURIPrereveal' when calling nftDeployUpdateContractPost");
      }
      // verify the required parameter 'allowListMintStartTime' is set
      if (allowListMintStartTime === undefined || allowListMintStartTime === null) {
        throw new Error("Missing the required parameter 'allowListMintStartTime' when calling nftDeployUpdateContractPost");
      }
      // verify the required parameter 'publicSaleStartTime' is set
      if (publicSaleStartTime === undefined || publicSaleStartTime === null) {
        throw new Error("Missing the required parameter 'publicSaleStartTime' when calling nftDeployUpdateContractPost");
      }
      // verify the required parameter 'allowlistMintPriceInWei' is set
      if (allowlistMintPriceInWei === undefined || allowlistMintPriceInWei === null) {
        throw new Error("Missing the required parameter 'allowlistMintPriceInWei' when calling nftDeployUpdateContractPost");
      }
      // verify the required parameter 'publicPriceInWei' is set
      if (publicPriceInWei === undefined || publicPriceInWei === null) {
        throw new Error("Missing the required parameter 'publicPriceInWei' when calling nftDeployUpdateContractPost");
      }
      // verify the required parameter 'metadataFrozen' is set
      if (metadataFrozen === undefined || metadataFrozen === null) {
        throw new Error("Missing the required parameter 'metadataFrozen' when calling nftDeployUpdateContractPost");
      }
      // verify the required parameter 'baseTokenURI' is set
      if (baseTokenURI === undefined || baseTokenURI === null) {
        throw new Error("Missing the required parameter 'baseTokenURI' when calling nftDeployUpdateContractPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'contractAddress': contractAddress,'chain': chain,'tokenURIPrereveal': tokenURIPrereveal,'allowListMintStartTime': allowListMintStartTime,'publicSaleStartTime': publicSaleStartTime,'allowlistMintPriceInWei': allowlistMintPriceInWei,'publicPriceInWei': publicPriceInWei,'metadataFrozen': metadataFrozen,'baseTokenURI': baseTokenURI
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/nft/deploy/updateContract', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftDeployUpdateWithdrawFundsPost operation.
     * @callback moduleapi/UpdateApi~nftDeployUpdateWithdrawFundsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Withdraw Funds
     * Withdraw funds from your smart contract.
     * @param {String} contractAddress 
     * @param {String} withdrawAddress 
     * @param {module:model/String} chain 
     * @param {module:api/UpdateApi~nftDeployUpdateWithdrawFundsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftDeployUpdateWithdrawFundsPost(contractAddress, withdrawAddress, chain, callback) {
      
      let postBody = null;
      // verify the required parameter 'contractAddress' is set
      if (contractAddress === undefined || contractAddress === null) {
        throw new Error("Missing the required parameter 'contractAddress' when calling nftDeployUpdateWithdrawFundsPost");
      }
      // verify the required parameter 'withdrawAddress' is set
      if (withdrawAddress === undefined || withdrawAddress === null) {
        throw new Error("Missing the required parameter 'withdrawAddress' when calling nftDeployUpdateWithdrawFundsPost");
      }
      // verify the required parameter 'chain' is set
      if (chain === undefined || chain === null) {
        throw new Error("Missing the required parameter 'chain' when calling nftDeployUpdateWithdrawFundsPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'contractAddress': contractAddress,'withdrawAddress': withdrawAddress,'chain': chain
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/nft/deploy/update/withdrawFunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftUpdateAddToAllowListPost operation.
     * @callback moduleapi/UpdateApi~nftUpdateAddToAllowListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add addresses to Allowlist
     * Add an address (or group of addresses) to the allowlist of your collection contract.
     * @param {String} contractAddress 
     * @param {String} addresses 
     * @param {String} mintSlots 
     * @param {module:model/String} chain 
     * @param {module:api/UpdateApi~nftUpdateAddToAllowListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftUpdateAddToAllowListPost(contractAddress, addresses, mintSlots, chain, callback) {
      
      let postBody = null;
      // verify the required parameter 'contractAddress' is set
      if (contractAddress === undefined || contractAddress === null) {
        throw new Error("Missing the required parameter 'contractAddress' when calling nftUpdateAddToAllowListPost");
      }
      // verify the required parameter 'addresses' is set
      if (addresses === undefined || addresses === null) {
        throw new Error("Missing the required parameter 'addresses' when calling nftUpdateAddToAllowListPost");
      }
      // verify the required parameter 'mintSlots' is set
      if (mintSlots === undefined || mintSlots === null) {
        throw new Error("Missing the required parameter 'mintSlots' when calling nftUpdateAddToAllowListPost");
      }
      // verify the required parameter 'chain' is set
      if (chain === undefined || chain === null) {
        throw new Error("Missing the required parameter 'chain' when calling nftUpdateAddToAllowListPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'contractAddress': contractAddress,'addresses': addresses,'mintSlots': mintSlots,'chain': chain
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/nft/update/addToAllowList', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the nftUpdateTransferOperatorPost operation.
     * @callback moduleapi/UpdateApi~nftUpdateTransferOperatorPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer Contract Operator
     * Transfer the Operator of your deployed collection contract. Works with only collection contracts.
     * @param {String} contractAddress 
     * @param {String} newOperatorAddress 
     * @param {module:model/String} chain 
     * @param {module:api/UpdateApi~nftUpdateTransferOperatorPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftUpdateTransferOperatorPost(contractAddress, newOperatorAddress, chain, callback) {
      
      let postBody = null;
      // verify the required parameter 'contractAddress' is set
      if (contractAddress === undefined || contractAddress === null) {
        throw new Error("Missing the required parameter 'contractAddress' when calling nftUpdateTransferOperatorPost");
      }
      // verify the required parameter 'newOperatorAddress' is set
      if (newOperatorAddress === undefined || newOperatorAddress === null) {
        throw new Error("Missing the required parameter 'newOperatorAddress' when calling nftUpdateTransferOperatorPost");
      }
      // verify the required parameter 'chain' is set
      if (chain === undefined || chain === null) {
        throw new Error("Missing the required parameter 'chain' when calling nftUpdateTransferOperatorPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'contractAddress': contractAddress,'newOperatorAddress': newOperatorAddress,'chain': chain
      };

      let authNames = ['APIKey'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/nft/update/transferOperator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}