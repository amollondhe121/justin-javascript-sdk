/*
 * Verbwire API documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {InlineResponse2019} from '../model/InlineResponse2019';
import {InlineResponse400} from '../model/InlineResponse400';

/**
* CrossChainSend service.
* @module api/CrossChainSendApi
* @version 1.0.0
*/
export class CrossChainSendApi {

    /**
    * Constructs a new CrossChainSendApi. 
    * @alias module:api/CrossChainSendApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the nftSendQuickSendPost operation.
     * @callback moduleapi/CrossChainSendApi~nftSendQuickSendPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2019{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send Quick-minted NFT across Chains
     * Sends a quick-minted NFT from one block chain to another. Sending NFTs accross chains is a unique feature of Omnichain NFTs
     * @param {module:model/String} sourceChain 
     * @param {module:model/String} destChain 
     * @param {String} tokenId 
     * @param {String} sourceAddress 
     * @param {String} recipientAddress 
     * @param {module:api/CrossChainSendApi~nftSendQuickSendPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    nftSendQuickSendPost(sourceChain, destChain, tokenId, sourceAddress, recipientAddress, callback) {
      
      let postBody = null;
      // verify the required parameter 'sourceChain' is set
      if (sourceChain === undefined || sourceChain === null) {
        throw new Error("Missing the required parameter 'sourceChain' when calling nftSendQuickSendPost");
      }
      // verify the required parameter 'destChain' is set
      if (destChain === undefined || destChain === null) {
        throw new Error("Missing the required parameter 'destChain' when calling nftSendQuickSendPost");
      }
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling nftSendQuickSendPost");
      }
      // verify the required parameter 'sourceAddress' is set
      if (sourceAddress === undefined || sourceAddress === null) {
        throw new Error("Missing the required parameter 'sourceAddress' when calling nftSendQuickSendPost");
      }
      // verify the required parameter 'recipientAddress' is set
      if (recipientAddress === undefined || recipientAddress === null) {
        throw new Error("Missing the required parameter 'recipientAddress' when calling nftSendQuickSendPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'sourceChain': sourceChain,'destChain': destChain,'tokenId': tokenId,'sourceAddress': sourceAddress,'recipientAddress': recipientAddress
      };

      let authNames = ['APIKey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2019;

      return this.apiClient.callApi(
        '/nft/send/quickSend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}